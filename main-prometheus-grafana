------------------------------------track.py------------------for rds------------------

from flask import Flask, request, jsonify
from flask_cors import CORS
import pymysql
from datetime import datetime

app = Flask(__name__)
CORS(app)

# ---------- RDS MySQL Configuration ----------
DB_HOST = "database-1.c1ocammk0yf5.us-east-2.rds.amazonaws.com"
DB_USER = "admin"
DB_PASS = "Cloud1234"
DB_NAME = "user_tracking"

def get_db_connection():
    return pymysql.connect(
        host=DB_HOST,
        user=DB_USER,
        password=DB_PASS,
        database=DB_NAME,
        cursorclass=pymysql.cursors.DictCursor
    )

@app.route("/save-user-login", methods=["POST"])
def save_user_login():
    try:
        data = request.get_json(force=True)

        # Fallback: capture IP from HTTP request if frontend didn't send it
        client_ip = data.get("ip") or request.headers.get('X-Forwarded-For', request.remote_addr)

        timestamp = datetime.utcnow().strftime("%Y-%m-%d %H:%M:%S")

        conn = get_db_connection()
        with conn.cursor() as cursor:
            sql = """
                INSERT INTO user_logins
                (timestamp, user_agent, network_type, ip, city, region, country, latitude, longitude, gps_lat, gps_lon)
                VALUES (%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s)
            """
            cursor.execute(sql, (
                timestamp,
                data.get("userAgent"),
                data.get("networkType"),
                client_ip,
                data.get("city"),
                data.get("region"),
                data.get("country"),
                data.get("latitude"),
                data.get("longitude"),
                data.get("gpsLat"),
                data.get("gpsLon")
            ))
        conn.commit()
        conn.close()

        return jsonify({"status": "success", "message": "Login saved"}), 200

    except Exception as e:
        return jsonify({"status": "error", "message": str(e)}), 500

@app.route("/get-logins", methods=["GET"])
def get_logins():
    try:
        conn = get_db_connection()
        with conn.cursor() as cursor:
            cursor.execute("SELECT * FROM user_logins ORDER BY timestamp DESC")
            logs = cursor.fetchall()
        conn.close()
        return jsonify(logs), 200
    except Exception as e:
        return jsonify({"status": "error", "message": str(e)}), 500

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=1000)


